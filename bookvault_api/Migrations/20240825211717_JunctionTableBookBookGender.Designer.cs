// <auto-generated />
using System;
using BookVault.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace bookvault_api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240825211717_JunctionTableBookBookGender")]
    partial class JunctionTableBookBookGender
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookBookGenre", b =>
                {
                    b.Property<int>("BookGenresId")
                        .HasColumnType("integer");

                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.HasKey("BookGenresId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("BookBookGenre");
                });

            modelBuilder.Entity("BookVault.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AuthorSynopsis")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CountryOfBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("BookVault.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("BookCoverUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BookIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("Date");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("BookVault.Models.BookGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BookGenres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Genre = "Fantasy"
                        },
                        new
                        {
                            Id = 2,
                            Genre = "Science_Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Genre = "Dystopia"
                        },
                        new
                        {
                            Id = 4,
                            Genre = "Action_and_adventure"
                        },
                        new
                        {
                            Id = 5,
                            Genre = "Crime_Fiction"
                        },
                        new
                        {
                            Id = 6,
                            Genre = "Horror"
                        },
                        new
                        {
                            Id = 7,
                            Genre = "Thriller_and_Suspense"
                        },
                        new
                        {
                            Id = 8,
                            Genre = "Historical_fiction"
                        },
                        new
                        {
                            Id = 9,
                            Genre = "Romance"
                        },
                        new
                        {
                            Id = 10,
                            Genre = "Novel"
                        },
                        new
                        {
                            Id = 11,
                            Genre = "Womens_Fiction"
                        },
                        new
                        {
                            Id = 12,
                            Genre = "LGBTQ"
                        },
                        new
                        {
                            Id = 13,
                            Genre = "Contemporary_Fiction"
                        },
                        new
                        {
                            Id = 14,
                            Genre = "Magic_realism"
                        },
                        new
                        {
                            Id = 15,
                            Genre = "Graphic_novel"
                        },
                        new
                        {
                            Id = 16,
                            Genre = "Tale"
                        },
                        new
                        {
                            Id = 17,
                            Genre = "Young_adult"
                        },
                        new
                        {
                            Id = 18,
                            Genre = "New_adult"
                        },
                        new
                        {
                            Id = 19,
                            Genre = "Childrens"
                        },
                        new
                        {
                            Id = 20,
                            Genre = "Memoirs_and_autobiography"
                        },
                        new
                        {
                            Id = 21,
                            Genre = "Biography"
                        },
                        new
                        {
                            Id = 22,
                            Genre = "Gastronomy"
                        },
                        new
                        {
                            Id = 23,
                            Genre = "Art_and_Photography"
                        },
                        new
                        {
                            Id = 24,
                            Genre = "Self_help"
                        },
                        new
                        {
                            Id = 25,
                            Genre = "History"
                        },
                        new
                        {
                            Id = 26,
                            Genre = "Trip"
                        },
                        new
                        {
                            Id = 27,
                            Genre = "True_Crimes"
                        },
                        new
                        {
                            Id = 28,
                            Genre = "Humor"
                        },
                        new
                        {
                            Id = 29,
                            Genre = "Tests"
                        },
                        new
                        {
                            Id = 30,
                            Genre = "Guides_How_To"
                        },
                        new
                        {
                            Id = 31,
                            Genre = "Religion_and_Spirituality"
                        },
                        new
                        {
                            Id = 32,
                            Genre = "Humanities_and_Social_Sciences"
                        },
                        new
                        {
                            Id = 33,
                            Genre = "Fatherhood_and_family"
                        },
                        new
                        {
                            Id = 34,
                            Genre = "Technology_and_Science"
                        });
                });

            modelBuilder.Entity("BookVault.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RoleName");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "User"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("BookVault.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BookBookGenre", b =>
                {
                    b.HasOne("BookVault.Models.BookGenre", null)
                        .WithMany()
                        .HasForeignKey("BookGenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookVault.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookVault.Models.Book", b =>
                {
                    b.HasOne("BookVault.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookVault.Models.User", b =>
                {
                    b.HasOne("BookVault.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookVault.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookVault.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
